name: Deploy SpringBoot with Docker to NCP

on:
  push:
    branches: [ bug/#44 ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: bug/#44

      - name: 📌 Check current Git branch and commit
        run: |
          echo "✅ 현재 브랜치 확인:"
          git branch -vv

          echo "✅ 최신 커밋 로그 확인:"
          git log -1 --oneline

      - name: 🧱 Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: 📝 Create .env.prod from secrets
        run: echo "${{ secrets.ENV_PROD_CONTENT }}" > .env.prod

      - name: 📦 Export .env.prod for build
        run: |
          set -o allexport
          source .env.prod
          set +o allexport

      - name: 🔍 Check if DataController.java is present
        run: |
          find . -name "*DataStoreController.java"
          cat src/main/java/com/onggiyonggi/domain/data/controller/DataStoreController.java || echo "❌ 
          DataStoreController 없음"

      - name: ✅ Make gradlew executable
        run: chmod +x ./gradlew

      - name: 🏗️ Build Spring Boot with prod profile and .env
        run: ./gradlew build -x test -Dspring.profiles.active=prod --no-daemon

      - name: 🧪 Check if DataController is in JAR
        run: |
          unzip -l build/libs/onggiyonggi-0.0.1-SNAPSHOT.jar | grep DataStoreController

      - name: 🐳 Log in to NCP Container Registry
        run: echo "${{ secrets.NCP_REGISTRY_PW }}" | docker login ${{ secrets.NCP_REGISTRY }} -u ${{ secrets.NCP_REGISTRY_ID }} --password-stdin

      - name: 📦 Copy built JAR to root for Docker build
        run: cp build/libs/onggiyonggi-0.0.1-SNAPSHOT.jar app.jar

      - name: 📦 Build & Push Docker Image
        run: |
          IMAGE=${{ secrets.NCP_REGISTRY }}/onggiyonggi:latest
          docker builder prune -af
          docker build --no-cache -t $IMAGE .
          docker push $IMAGE

      - name: 📦 Upload .env.prod to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.NCP_KEY }}
          source: "docker-compose.yml,Dockerfile,.env.prod"
          target: "/server/"

      - name: 🔐 Deploy to NCP Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.NCP_KEY }}
          script: |
            docker login ${{ secrets.NCP_REGISTRY }} -u ${{ secrets.NCP_REGISTRY_ID }} -p ${{ secrets.NCP_REGISTRY_PW }}
            cd /server
            docker image rm ${{ secrets.NCP_REGISTRY }}/onggiyonggi:latest || true
            docker pull ${{ secrets.NCP_REGISTRY }}/onggiyonggi:latest
            docker compose down
            docker compose up -d --force-recreate --remove-orphans
